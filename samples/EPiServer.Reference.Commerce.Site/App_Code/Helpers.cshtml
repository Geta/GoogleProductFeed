@using System.Linq
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using EPiServer.Commerce.Catalog.ContentTypes
@using EPiServer.Reference.Commerce.Site.Features.Cart.ViewModels
@using EPiServer.Reference.Commerce.Site.Features.Product.Models
@using Mediachase.Commerce
@using EPiServer.ServiceLocation
@using Mediachase.Commerce.Markets
@using EPiServer.Reference.Commerce.Site.Features.Market.Services
@using EPiServer.Reference.Commerce.Site.Features.Shared.Extensions
@using EPiServer.Core
@using EPiServer.Shell.Web.Mvc.Html
@using EPiServer.Web.Routing
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@functions
{
    private static WebViewPage page { get { return PageContext.Page as WebViewPage; } }

    private static MvcHtmlString CreateAlternateLinkWithHrefLang(string pageUrl, string lang)
    {
        var tagBuilder = new TagBuilder("link");
        tagBuilder.MergeAttribute("rel", "alternate");
        tagBuilder.MergeAttribute("href", pageUrl);
        tagBuilder.MergeAttribute("hreflang", lang);
        return new MvcHtmlString(tagBuilder.ToString(TagRenderMode.SelfClosing) + Environment.NewLine);
    }

    private static string GetAbsoluteUrl(ContentReference requestContentLink, string language)
    {
        return Request.Url.GetLeftPart(UriPartial.Authority) + UrlResolver.Current.GetUrl(Request, requestContentLink, language);
    }

    private static IEnumerable<string> GetAllSiteAvailableLanguages()
    {
        var marketService = ServiceLocator.Current.GetInstance<IMarketService>();
        var allMarkets = marketService.GetAllMarkets().Where(x => x.IsEnabled).ToList();
        var languages = allMarkets.SelectMany(x => x.Languages).Distinct();
        return languages.Select(l => l.Name);
    }

    private static string GetLocaleSettings()
    {
        var currencyService = ServiceLocator.Current.GetInstance<ICurrencyService>();
        var currencyCultureMappings = new Dictionary<string, string>
        {
            { "AUD", "en-AU"},
            { "BRL", "pt-BR"},
            { "CAD", "en-CA"},
            { "CLP", "arn-CL"},
            { "EUR", "de-DE"},
            { "JPY", "ja-JP"},
            { "NOK", "se-NO"},
            { "SAR", "ar-SA"},
            { "SEK", "sv-SE"},
            { "GBP", "en-GB"},
            { "USD", "en-US"}
        };

        var currency = currencyService.GetCurrentCurrency();
        var localeSettings = new
        {
            culture = currencyCultureMappings[currency.CurrencyCode],
            currencyCode = currency.CurrencyCode,
            currencyDigits = currency.Format.CurrencyDecimalDigits,
            currencySymbol = currency.Format.CurrencySymbol,
            notAvailable = page.Html.Translate("/Product/NotAvailable")
        };

        return "localeSettings: " + Serialize(localeSettings);
    }

    private static string Serialize(object obj)
    {
        return JsonConvert.SerializeObject(obj, SerializerSettings);
    }

    private static readonly JsonSerializerSettings SerializerSettings = new JsonSerializerSettings
    {
        ContractResolver = new CamelCasePropertyNamesContractResolver()
    };
}

@helper RenderHrefLangs(ContentReference requestContentLink, string defaultLanguage)
{
    var languages = GetAllSiteAvailableLanguages();
    if (languages.Count() <= 1)
    {
        return;
    }
    foreach (var lang in languages)
    {
        @page.Html.Raw(CreateAlternateLinkWithHrefLang(GetAbsoluteUrl(requestContentLink, lang), lang));
    }
    @page.Html.Raw(CreateAlternateLinkWithHrefLang(GetAbsoluteUrl(requestContentLink, defaultLanguage), "x-default"));
}

@helper RenderMoney(decimal amount, Currency currency)
{
    Money money = new Money(amount, currency);
    @Helpers.RenderMoney(money);
}

@helper RenderMoney(Money money)
{
<span>
    @page.Html.Raw(money.ToString().Replace(money.Currency.Format.CurrencySymbol, @"<span class=""product-price__currency-marker"">" + money.Currency.Format.CurrencySymbol + "</span>"))
</span>
}

@helper RenderSize(EntryContentBase content)
{
    var variant = content as FashionVariant;
    if (variant != null && variant.Size != null)
    {
        @page.Html.Hidden("size", variant.Size.Trim())
        <span>@variant.Size</span>
    }
}

@helper RenderSizeDropDown(CartItemViewModel cartItem)
{
    var variant = cartItem.Entry as FashionVariant;
    if (variant != null && variant.Size != null)
    {
    <span>
        @page.Html.Hidden("size", variant.Size.Trim())
        @page.Html.DropDownList("newSize", new SelectList(cartItem.AvailableSizes, variant.Size), new { @class = "form-control cart-control jsChangeCartItem" })
    </span>
    }
}