@model EPiServer.Reference.Commerce.Site.Features.Checkout.ViewModels.CheckoutViewModel
@{
    if (Request.IsAjaxRequest())
    {
        Layout = null;
    }
}

<div class="container-fluid" id="CheckoutView" data-url="@Url.Action("Index", "Checkout")">

    <div class="row section-box checkout jsCheckout">
        <div class="col-xs-12 col-sm-6">
            <h2>@Html.PropertyFor(x => x.CurrentPage.Name)</h2>
        </div>
        <div class="col-xs-12 col-sm-6">
            @Html.ActionLink(Html.Translate("/Checkout/Shipment/SingleShipment"), "SingleShipment", new { node = Model.CurrentPage.ContentLink }, new { @class = "btn btn-primary pull-right" })
        </div>
    </div>
    <div class="row section-box">
        <div class="col-xs-12">
            <h4>@Html.Translate("/Checkout/Coupons/Heading")</h4>
            <p class="small">@Html.Translate("/Checkout/Coupons/CouponCode/Info")</p>
            <div class="row">
                <div class="col-xs-12 col-md-6">
                    @if (!(bool)ViewData["IsReadOnly"])
                    {
                        <div class="form-inline discount">
                            <div class="input-group">
                                <input type="text" class="form-control form--blue" id="inputCouponCode">
                                <span class="input-group-btn">
                                    <button type="submit" class="btn btn-default btn--blue js-add-couponcode" data-url="@Url.Action("AddCouponCode", "Checkout", null)">
                                        @Html.Translate("/Checkout/Coupons/CouponCode/Button")
                                    </button>
                                </span>
                            </div>
                        </div>
                        <div class="alert alert-danger couponcode-errormessage" style="display: none">
                            <p>@Html.Translate("/Checkout/Coupons/CouponCode/ErrorMessage")</p>
                        </div>
                    }
                    @if (Model.AppliedCouponCodes != null && Model.AppliedCouponCodes.Any())
                    {
                        <div class="col-xs-12">
                            <h5>@Html.Translate("/Checkout/Coupons/AppliedCoupons/Heading")</h5>
                            <ul>
                                @foreach (var couponCode in Model.AppliedCouponCodes)
                                {
                                    <li>
                                        @Html.Label(couponCode)
                                        @Html.ActionLink(@Html.Translate("/Checkout/Coupons/AppliedCoupons/RemoveButton"), "RemoveCouponCode", "Checkout", new { @class = "btn btn-danger btn-xs js-remove-couponcode" })
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>

                <div class="col-xs-12 col-md-6 keep-shopping-col">
                    <button role="button" onclick="window.location.href = '@Model.ReferrerUrl'" class="btn btn-default btn--blue"><i class="glyphicon glyphicon-arrow-left"></i> @Html.Translate("/Checkout/Continue/Button")</button>
                </div>
            </div>
        </div>
    </div>

    @using (Html.BeginForm("Purchase", "Checkout", FormMethod.Post, new { @class = "jsCheckoutForm", @data_UpdateUrl = Url.Action("Update", null, null) }))
    {
        <div class="row section-box">
            <div class="col-xs-12">
                <div class="checkout-cart jsLargeCart">
                    @{
                        for (int shipmentIndex = 1; shipmentIndex <= Model.Shipments.Count; shipmentIndex++)
                        {
                            @Html.HiddenFor(model => model.Shipments[shipmentIndex - 1].Address.AddressId)
                            @Html.HiddenFor(model => model.Shipments[shipmentIndex - 1].Address.Name)
                            @Html.HiddenFor(model => model.Shipments[shipmentIndex - 1].Address.FirstName)
                            @Html.HiddenFor(model => model.Shipments[shipmentIndex - 1].Address.LastName)
                            @Html.HiddenFor(model => model.Shipments[shipmentIndex - 1].Address.PostalCode)
                            @Html.HiddenFor(model => model.Shipments[shipmentIndex - 1].Address.City)
                            @Html.HiddenFor(model => model.Shipments[shipmentIndex - 1].Address.CountryCode)
                            @Html.HiddenFor(model => model.Shipments[shipmentIndex - 1].Address.CountryRegion.Region)
                            @Html.HiddenFor(model => model.Shipments[shipmentIndex - 1].Address.Line1)

                            <div class="row shipment-summary-container">
                                <div class="col-xs-12 col-sm-8">
                                    <div class="row">
                                        <div class="col-xs-12">
                                            <h2>Shipment @shipmentIndex of @Model.Shipments.Count</h2>
                                            @{ Html.RenderPartial("_AddressSummaryLine", Model.Shipments[shipmentIndex - 1].Address); }
                                        </div>
                                    </div>

                                    @foreach (var cartItem in Model.Shipments[shipmentIndex - 1].CartItems)
                                    {
                                        string productLevelClass = cartItem.DiscountedUnitPrice.HasValue ? "has-discount" : string.Empty;

                                        <div class="row cart-row @productLevelClass">

                                            <div class="col-xs-4 col-sm-2">
                                                <a href="@cartItem.Url "><img src="@cartItem.ImageUrl" class="product-image" /></a>
                                            </div>
                                            <div class="col-xs-8 col-sm-10">
                                                <div class="row">

                                                    <div class="col-sm-4">
                                                        <a href="@cartItem.Url" class="link--black">@cartItem.DisplayName</a><br />

                                                        <span class="product-brand xs-vertical-margin">@cartItem.Brand</span>
                                                        @if (cartItem.DiscountedUnitPrice.HasValue)
                                                        {
                                                            <span class="product-price">@Helpers.RenderMoney(cartItem.PlacedPrice)</span>
                                                            <span class="product-price product-price--discount xs-vertical-margin">@Helpers.RenderMoney(cartItem.DiscountedUnitPrice.Value)</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="product-price xs-vertical-margin">@Helpers.RenderMoney(cartItem.PlacedPrice)</span>
                                                        }
                                                    </div>

                                                    <div class="col-xs-6 col-sm-2">
                                                        <strong>@Html.Translate("/ProductPage/Size")</strong><br />
                                                        @Helpers.RenderSize(cartItem.Entry)
                                                    </div>

                                                    <div class="col-xs-6 col-sm-2">
                                                        <strong>@Html.Translate("/Cart/Labels/Quantity")</strong><br />
                                                        @cartItem.Quantity.ToString("0")
                                                    </div>

                                                    <div class="col-xs-6 col-sm-2 product-col-price text-right">
                                                        @Helpers.RenderMoney(cartItem.DiscountedPrice.GetValueOrDefault())
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="col-xs-12 col-sm-4">
                                    <h2>&nbsp;</h2>
                                    <strong>@Html.Translate("/Checkout/MultiShipment/DeliveryOption")</strong><br />
                                    @foreach (var shippingMethodViewModel in Model.Shipments[shipmentIndex - 1].ShippingMethods)
                                    {
                                        <div class="radio shipping-method" data-url="@Url.Action("UpdateShippingMethod", "Cart", new { ShipmentId = Model.Shipments[shipmentIndex - 1].ShipmentId, ShippingMethodId = shippingMethodViewModel.Id })">
                                            <label>
                                                @Html.RadioButtonFor(model => Model.Shipments[shipmentIndex - 1].ShippingMethodId, shippingMethodViewModel.Id, new { @id = shippingMethodViewModel.Id, @class = "jsChangeShipment" })
                                                @shippingMethodViewModel.DisplayName
                                                @Helpers.RenderMoney(shippingMethodViewModel.Price)
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        if (!string.IsNullOrEmpty(Model.Message))
        {
            <div class="alert alert-warning">
                @Model.Message
            </div>
        }

        if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                @foreach (var item in ViewData.ModelState)
                {
                    foreach (var error in item.Value.Errors)
                    {
                        <p>@error.ErrorMessage</p>
                    }
                }
            </div>
        }

        if (!(bool)ViewData["IsReadOnly"])
        {
            <h2>@Html.Translate("/Checkout/Payment/Heading")</h2>
            <div class="row section-box">
                <div id="billingAddressContainer" class="col-md-6 col-xs-12">
                    @{ Html.RenderPartial("BillingAddress", Model); }
                </div>
                <div class="col-md-6 col-xs-12">
                    @{ Html.RenderAction("PaymentMethodSelection", "Payment"); }
                </div>
                <input type="hidden" name="shippingAddressIndex" id="ShippingAddressIndex" />
            </div>
        }

        <div class="row section-box">
            <div class="col-xs-12">
                @{ Html.RenderAction("OrderSummary"); }
                @if (!(bool)ViewData["IsReadOnly"])
                {
                    <button type="submit" class="btn btn-primary btn--blue pull-right">@Html.Translate("/Checkout/PlaceOrder")</button>
                }
            </div>
        </div>
    }
</div>