@model EPiServer.Reference.Commerce.Site.Features.Product.ViewModels.FashionProductViewModel

<div class="row jsProductDetails">

    <div class="col-xs-12 col-sm-4 col--leading">
        <div id="product-carousel" class="carousel slide" data-ride="carousel">
            <div class="carousel-inner" role="listbox">
                @for (var i = 0; i < Model.Images.Count; i++)
                {
                    <div class="item" data-slide-number="@i">
                        <img src="@Model.Images.ElementAt(i)" alt="@Model.Product.Code" />
                    </div>
                }
            </div>
        </div>
        <div class="row" id="carousel-thumbs">
            <ul class="carousel-thumbs js-carousel-thumbs">
                @for (var i = 0; i < Model.Images.Count; i++)
                {
                    <li class="col-xs-3">
                        <a href="#" class="thumbnail js-thumbnail" id="@i"><img src="@Model.Images.ElementAt(i)" /></a>
                    </li>
                }
            </ul>
        </div>
    </div>

    <div class="col-xs-12 col-sm-8 product-info">
        <div class="row">
            <div class="col-xs-12">
                <h1>@Html.PropertyFor(x => x.Product.DisplayName)</h1>
            </div>
            <div class="col-xs-12 col-sm-6">
                <h2 class="product-brand">@Html.PropertyFor(x => x.Product.Brand)</h2>
            </div>
            <div class="col-xs-12 col-sm-6">
                @if (Model.IsAvailable)
                {
                    if (Model.DiscountedPrice.HasValue && Model.DiscountedPrice.Value < Model.ListingPrice)
                    {
                        <h4 class="product-price">@Helpers.RenderMoney(Model.ListingPrice)</h4>
                        <h4 class="product-price--discount">@Helpers.RenderMoney(Model.DiscountedPrice.Value)</h4>
                    }
                    else
                    {
                        <h4 class="product-price">@Helpers.RenderMoney(Model.ListingPrice)</h4>
                    }
                }
                else
                {
                    <h4 class="product-price">@Html.Translate("/Product/NotAvailable")</h4>
                }
            </div>
        </div>
        <div class="row">
            @using (Html.BeginForm("SelectVariant", "Product", FormMethod.Post, new { @class = "product-details__form clearfix" }))
            {
                <div class="col-xs-12 col-sm-6">
                    <label for="Color">@Html.Translate("/ProductPage/VariationSelection/Color")</label>
                    @Html.DropDownListFor(x => x.Color, Model.Colors, new { @class = "form-control jsVariationSwitch" })
                </div>
                <div class="col-xs-12 col-sm-6">
                    <label for="Size">@Html.Translate("/ProductPage/VariationSelection/Size")</label>
                    @Html.DropDownListFor(x => x.Size, Model.Sizes, new { @class = "form-control jsVariationSwitch" })
                </div>
            }
        </div>
        <div class="row">
            <div class="col-xs-12">
                @Html.PropertyFor(x => x.Product.LongDescription)
                <p>
                    @Html.PropertyFor(x => x.Product.Description)
                </p>
                <p>
                    <strong>SKU:</strong> @Html.PropertyFor(x => x.Variant.Code)
                </p>
            </div>
        </div>

        <div class="row">
            <div class="col-md-7">
                @if (Model.IsAvailable && !(bool)ViewData["IsReadOnly"])
                {
                    using (Html.BeginForm("AddToCart", "Cart", FormMethod.Post, new { @class = "form-inline", data_container = "MiniCart" }))
                    {
                        @Html.Hidden("code", Model.Variant.Code)
                        <button type="submit" role="button" class="btn btn-primary jsAddToCart" data-container="MiniCart"><span class="glyphicon glyphicon-shopping-cart"></span> @Html.Translate("/Product/Button/AddToCart")</button>
                    }
                    if (User.Identity.IsAuthenticated)
                    {
                        using (Html.BeginForm("AddToCart", "WishList", FormMethod.Post, new { @class = "form-inline jsAddToWishList", data_container = "WishListMiniCart" }))
                        {
                            @Html.Hidden("code", Model.Variant.Code)
                            <button type="submit" role="button" class="btn btn-default btn--blue jsAddToCart" data-container="WishListMiniCart"><span class="glyphicon glyphicon-heart"></span> @Html.Translate("/Product/Button/AddToWishList")</button>
                        }
                    }
                }
            </div>
            <div id="CartWarningMessage" class="col-md-5 col-xs-12 alert alert-danger pull-right" hidden>
                <button type="button" class="close" data-hide="alert">&times;</button>
                <span class="warning-message"></span>
            </div>
        </div>
        <div class="warehouse-availability-container"
             data-url="@Url.Action("GetAvailability", "Warehouse")"
             data-sku-code="@Model.Variant.Code"></div>
    </div>
</div>

@section Meta {
    @{
        if (!String.IsNullOrEmpty(Model.Product.SeoInformation.Description))
        {
            <meta property="description" content="@Html.AttributeEncode(Model.Product.SeoInformation.Description)" />
        }
        else if (Model.Product.Description != null && !Model.Product.Description.IsEmpty)
        {
            <meta property="description" content="@Html.AttributeEncode(Model.Product.Description)" />
        }
        if (!String.IsNullOrEmpty(Model.Product.SeoInformation.Keywords))
        {
            <meta property="keywords" content="@Html.AttributeEncode(Model.Product.SeoInformation.Keywords)" />
        }
    }
}

@if (Functions.ShouldRenderTrackingSection() && !Model.SkipTracking)
{
    @section Tracking{
    <script>
        $(document).ready(function () {
            var refCode = '@Model.Product.Code';
            var productName = '@Model.Product.Name';
            var productTrackingData = TrackingDataFactory.createProductTrackingData(refCode, productName);
            var recommendationId =  parseInt(isNaN('@Request.QueryString["recommendationId"]')? '0': '@Request.QueryString["recommendationId"]');
            if (recommendationId > 0) {
                productTrackingData["recommendationId"] = recommendationId;
            }
            productTrackingData["customAttributes"] = { 'marketId': Market.getSelectedMarketId() };

            epiRecommendations.track(productTrackingData, null, Recommendations.render, { sectionMappings: [{ area: "productAlternativesWidget", selector: ".recommendations-right", numberOfItemsToRender: 3 }, { area: "productCrossSellsWidget", selector: ".recommendations-bottom" }] })
        });
    </script>
    }
}